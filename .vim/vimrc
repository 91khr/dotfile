" ======================================================================================================================
" Note: You are suggested to use a wide(>120 chars) client to view or edit this file
" TODO: Sort the commands by a cleaner key
" Author: Virginia Senioria
" Senioriae VIm configuration. Supports Windows and Linux(Only tested on Arch Linux, may not be the newest)
" Note that this file should not be directly used as your .vimrc.
version 8.0

let s:config_dir = expand("<sfile>:h")

" {{{ Clean up
if exists("g:vimrc_load_option")
    " Reset all options
    if g:vimrc_load_option == 1
        mapclear
        autocmd!
        set all&
        comclear
    elseif g:vimrc_load_option == 2
        finish
    endif
    set packpath+=~/.vim
    " Load the options loaded as plugins
    function! s:ReloadPlugins(header)
        for l:file in readdir(a:header, { -> v:val !~# '^\..*' })
            execute "source " . a:header . '/' . l:file
        endfor
    endfunction
    call s:ReloadPlugins(s:config_dir . "/plugin")
    delfunction s:ReloadPlugins
endif
let g:vimrc_load_option = 1
" }}} End cleaning up

" {{{ Load files as package and internal packages
execute "set rtp+=" . expand("<sfile>:h")
let &packpath .= ',' . s:config_dir
" }}} End loading files

" {{{ Helper functions and commands
function! IsExec(name)  " Like executable(), but fallback to wsl on Windows
    if executable(a:name) | return v:true  | " This is always correct
    elseif has('win32') && executable("wsl")
        silent call system("wsl which " . a:name)
        return v:shell_error == 0
    else | return v:false
    endif
endfunction
" }}} End helper functions and commands

" {{{ Plugins
" {{{ Plugin list and setup options
" ==================================================================================================================
" Vim-packager and plugin settings
" ==================================================================================================================

let g:packager_config = #{
            \     packs: [
            "\        Status line
            \         #{ name: 'itchyny/lightline.vim', location: 'start' },
            "\        Color scheme
            \         #{ name: 'altercation/vim-colors-solarized', location: 'start' },
            "\        Make quotes colorful, for lisp :)
            \         #{ name: 'luochen1990/rainbow', location: 'start' },
            "\        Show the marks
            \         #{ name: 'kshenoy/vim-signature', location: 'start' },
            \
            "\        File explorer
            \         'scrooloose/nerdtree',
            "\        Run shell asyncly
            \         'skywind3000/asyncrun.vim',
            \
            "\        Language server
            \         #{ name: 'neoclide/coc.nvim', branch: 'release' },
            "\         'prabirshrestha/async.vim',
            "\         'prabirshrestha/vim-lsp',
            "\         'prabirshrestha/asyncomplete.vim',
            "\         'prabirshrestha/asyncomplete-lsp.vim',
            "\        Document for LSP
            "\         'Shougo/echodoc.vim',
            "\        Snippets
            \         #{ name: 'SirVer/ultisnips', location: 'start' },
            \
            "\         Markdown
            \          'godlygeek/tabular',
            \          'plasticboy/vim-markdown',
            "\         Latex
            "\          'lervag/vimtex',
            \          '91khr/vim-latex-live-preview',
            \
            "\         Zen mode :)
            "\          'junegunn/goyo.vim',
            \     ]
            \ }
" System specific
if has("win32")
else
    let g:packager_config.packs += [
                \     #{ name: 'vim-scripts/fcitx.vim', location: 'start' }
                \ ]
endif

" {{{ Helpers for loading packages
" Dynamic load package filetype
function! s:AddPackFT(filetype,plug)
    let ft = type(a:filetype) == type([]) ? join(a:filetype, ",") : a:filetype
    let plglist = type(a:plug) == type([]) ? join(a:plug, " | packadd ") : a:plug
    execute "autocmd FileType " . ft . " packadd " . plglist
                \ . " | execute \"autocmd! FileType " . ft . "\" | execute \"set ft=\" . &ft | e %"
endfunction
" Dynamic load package command
function! s:AddPackCmd(cmdname, exec, args)
    if has_key(a:args, 'cond') ? eval(a:args.cond) : !has(':' . a:cmdname)
        let cmdargs = (has_key(a:args, 'args') ? '-nargs=' . a:args.args : '') . ' '
        execute "command! " . cmdargs . a:cmdname . ' delcommand ' . a:cmdname . '|' . a:exec
    endif
endfunction
" }}} End helpers for loading packages

call s:AddPackFT('md,markdown', ['tabular', 'vim-markdown'])
call s:AddPackFT('tex,plaintex', 'vimtex')
call s:AddPackCmd('NERDTree', 'packadd nerdtree | NERDTree', {})
call s:AddPackCmd('AsyncRun', 'packadd asyncrun.vim | AsyncRun <args>', {'args': '*'})
call s:AddPackCmd('Goyo', 'packadd goyo.vim | Goyo <args>', {'args': '*'})
call s:AddPackCmd('LLPStartPreview', 'packadd vim-latex-live-preview | LLPStartPreview', {})
call s:AddPackCmd('MarkdownPreview', 'packadd markdown-preview.nvim | e | MarkdownPreview', {})
call s:AddPackCmd('Coc', 'packadd coc.nvim | CocStart', {})
" }}} End package list and setup

" Package commands
command! PackClean call packager#manager#init() | call packager#manager#clean()
command! PackStatus call packager#manager#init() | call packager#manager#status()
command! PackSync call packager#manager#init() | call packager#manager#sync()

" {{{ Package options
" ==================================================================================================================
" Language Server, Echodoc and UltiSnip settings
" ==================================================================================================================
set completeopt=menuone,popup,noinsert,noselect
let g:UltiSnipsExpandTrigger = "<nop>"  | " The config will handle it ><

" ==================================================================================================================
" VimOI settings
" ==================================================================================================================
let g:rainbow_active = 1
if has('win32')
    let g:VimOI_CompileArgs = [ '/Od', '/nologo', '/utf-8', '/EHsc', '/W4', '/D_CRT_SECURE_NO_WARNINGS' ]
else
    let g:VimOI_CompileArgs = [ '-Wall', '-Wextra', '-DDEBUG' ]
endif

" ==================================================================================================================
" Theme settings(statusline and solarized
" ==================================================================================================================

" ==================================================================================================================
" Vimtex, preview and markdown settings
" ==================================================================================================================
let g:vimtex_enabled = 1
let g:vimtex_fold_enabled = 1
let g:vimtex_compiler_latexmk = {
            \     'options' : [
            \       '-xelatex',
            \     ],
            \ }
let g:livepreview_engine = 'xelatex'
if has("win32")
    let g:livepreview_previewer = 'start'
else
    let g:livepreview_previewer = 'zathura'
    set updatetime=400
endif
" Markdown options
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
" Markdown preview
let g:mkdp_refresh_slow = 1
let g:mkdp_auto_close = 0
let g:mkdp_browser = 'firefox'

" ==================================================================================================================
" NERD Tree and Netrw settings
" ==================================================================================================================
let g:netrw_liststyle=3

" ==================================================================================================================
" Goyo settings
" ==================================================================================================================
let g:goyo_width = '80%'
let g:goyo_height = '95%'
let g:goyo_linenr = 1
" }}} End package options
" }}} End packages

" {{{ Default filetype settings
function! s:DefaultLanguageSettings()
    function! s:OutputUnableToCompile()
        echohl Error
        echom "找不到编译方法, 不能编译"
        echohl Normal
    endfunction
    if !exists(":Compile")
        command! -buffer Compile call <SID>OutputUnableToCompile()
    endif
endfunction
autocmd FileType * call s:DefaultLanguageSettings()
" }}} End default filetype settings

" vim: set ft=vim :
