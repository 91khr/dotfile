" Note that this file should not be directly used as your .vimrc.

let s:config_dir = expand("<sfile>:h")

" {{{ Clean up
if exists("g:vimrc_load_option")
    if g:vimrc_load_option == 2
        finish
    endif
    set packpath+=~/.vim
    " Reload the options loaded as plugins
    function! s:ReloadPlugins(header)
        for l:file in glob(a:header .. "/**/*.vim", v:true, v:true)
            execute "source " .. l:file
        endfor
    endfunction
    for loc in [ "plugin", "import" ]
        call s:ReloadPlugins(s:config_dir .. "/" .. loc)
    endfor
    delfunction s:ReloadPlugins
endif
let g:vimrc_load_option = 1
" }}} End cleaning up

" {{{ Load files as package and internal packages
let &rtp ..= ',' .. s:config_dir
let &packpath ..= ',' .. s:config_dir
" }}} End loading files

" {{{ Packages
" {{{ Package list and setup options
" ==================================================================================================================
" Packager and plugin settings
" ==================================================================================================================

let g:packager_config = #{
            \     packs: [
            "\        Status line
            \         #{ name: '91khr/lines9', location: 'start' },
            "\        Color scheme
            \         #{ name: 'lifepillar/vim-solarized8', location: 'start' },
            \         #{ name: 'sainnhe/everforest', location: 'start' },
            "\        Make quotes colorful, for lisp :)
            \         #{ name: '91khr/rainbow', location: 'start' },
            "\        Show the marks
            \         #{ name: 'kshenoy/vim-signature', location: 'start' },
            \
            "\        File explorer
            \         'scrooloose/nerdtree',
            "\        Run shell asyncly
            \         'skywind3000/asyncrun.vim',
            "\        Git support
            \         'tpope/vim-fugitive',
            \
            "\        Language server
            \         #{ name: 'neoclide/coc.nvim', branch: 'release' },
            "\        Debug adapter
            \         #{ name: 'puremourning/vimspector' },
            "\        Snippets
            \         #{ name: 'SirVer/ultisnips', location: 'start' },
            \
            "\         Editor config
            \         #{ name: 'editorconfig/editorconfig-vim', location: 'start' },
            \
            "\         Markdown
            \          'godlygeek/tabular',
            \          'plasticboy/vim-markdown',
            "\         Latex
            "\          'lervag/vimtex',
            \          '91khr/vim-latex-live-preview',
            "\         Slint
            \          #{ name: 'slint-ui/vim-slint', location: 'start' },
            "\          Idris2
            \          #{ name: 'edwinb/idris2-vim', location: 'start' },
            \
            "\         Zen mode :)
            "\          'junegunn/goyo.vim',
            \     ]
            \ }

" System specific
if has("win32")
else
    let g:packager_config.packs += [
                "\     #{ name: 'vim-scripts/fcitx.vim', location: 'start' }
                \     #{ name: 'lilydjwg/fcitx.vim', location: 'start' }
                \ ]
endif

" {{{ Helpers for loading packages
" Dynamic load package filetype
function! s:AddPackFT(filetype,plug)
    let ft = type(a:filetype) == type([]) ? join(a:filetype, ",") : a:filetype
    let plglist = type(a:plug) == type([]) ? join(a:plug, " | packadd ") : a:plug
    execute "autocmd FileType " . ft . " ++once packadd " . plglist
endfunction
" Dynamic load package command
function! s:AddPackCmd(cmdname, exec, args)
    if has_key(a:args, 'cond') ? eval(a:args.cond) : !has(':' . a:cmdname)
        let cmdargs = (has_key(a:args, 'args') ? '-nargs=' . a:args.args : '') . ' '
        execute "command! " . cmdargs . a:cmdname . ' delcommand ' . a:cmdname . '|' . a:exec
    endif
endfunction
" }}} End helpers for loading packages

call s:AddPackFT('md,markdown,mail', ['tabular', 'vim-markdown'])
call s:AddPackFT('tex,plaintex', 'vimtex')
call s:AddPackCmd('NERDTree', 'packadd nerdtree | NERDTree', {})
call s:AddPackCmd('AsyncRun', 'packadd asyncrun.vim | AsyncRun <args>', {'args': '*'})
call s:AddPackCmd('Goyo', 'packadd goyo.vim | Goyo <args>', {'args': '*'})
call s:AddPackCmd('LLPStartPreview', 'packadd vim-latex-live-preview | LLPStartPreview', {})
call s:AddPackCmd('MarkdownPreview', 'packadd markdown-preview.nvim | MarkdownPreview', {})
call s:AddPackCmd('Coc', 'packadd coc.nvim | doautocmd User BeforeCocNvimInit | CocStart', {})
call s:AddPackCmd('Git', 'packadd vim-fugitive | Git <args>', {'args': '*'})
nnoremap <F5> <Cmd>packadd vimspector<CR>
" }}} End package list and setup

function! s:ListPacks(...)
    let res = []
    for pack in g:packager_config.packs
        if type(pack) == v:t_string
            let res += [pack]
        else
            let res += [pack.name]
        endif
    endfor
    return join(res, "\n")
endfunction

" Package commands
command! -bang -bar PackClean call packager#manager#clean(#{
            \ force: <bang>v:false, silent: stridx("<mods>", "silent") != -1 })
command! -bang -bar PackStatus call packager#manager#status(#{
            \ force: <bang>v:false, silent: stridx("<mods>", "silent") != -1 })
command! -bang -bar -nargs=* -complete=custom,s:ListPacks PackSync call packager#manager#sync(#{
            \ force: <bang>v:false, silent: stridx("<mods>", "silent") != -1, packs: split(<q-args>, " ") })

" }}} End packages

" vim: set ft=vim :
