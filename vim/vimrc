" Note that this file should not be directly used as your .vimrc.

let s:config_dir = expand("<sfile>:h")

" {{{ Clean up
if exists("g:vimrc_load_option")
    if g:vimrc_load_option == 2
        finish
    endif
    set packpath+=~/.vim
    " Reload the options loaded as plugins
    function! s:ReloadPlugins(header)
        for l:file in readdir(a:header, { -> v:val !~# '^\..*' })
            execute "source " . a:header . '/' . l:file
        endfor
    endfunction
    call s:ReloadPlugins(s:config_dir . "/plugin")
    delfunction s:ReloadPlugins
endif
let g:vimrc_load_option = 1
" }}} End cleaning up

" {{{ Load files as package and internal packages
let &rtp .= ',' .. s:config_dir
let &packpath .= ',' .. s:config_dir
" }}} End loading files

" {{{ Packages
" {{{ Package list and setup options
" ==================================================================================================================
" Packager and plugin settings
" ==================================================================================================================

let g:packager_config = #{
            \     packs: [
            "\        Status line
            \         #{ name: 'itchyny/lightline.vim', location: 'start' },
            "\        Color scheme
            \         #{ name: 'altercation/vim-colors-solarized', location: 'start' },
            "\        Make quotes colorful, for lisp :)
            \         #{ name: '91khr/rainbow', location: 'start' },
            "\        Show the marks
            \         #{ name: 'kshenoy/vim-signature', location: 'start' },
            \
            "\        File explorer
            \         'scrooloose/nerdtree',
            "\        Run shell asyncly
            \         'skywind3000/asyncrun.vim',
            \
            "\        Language server
            \         #{ name: 'neoclide/coc.nvim', branch: 'release' },
            "\        Snippets
            \         #{ name: 'SirVer/ultisnips', location: 'start' },
            \
            "\         Editor config
            \         #{ name: 'editorconfig/editorconfig-vim', location: 'start' },
            \
            "\         Markdown
            \          'godlygeek/tabular',
            \          'plasticboy/vim-markdown',
            "\         Latex
            "\          'lervag/vimtex',
            \          '91khr/vim-latex-live-preview',
            \
            "\         Zen mode :)
            "\          'junegunn/goyo.vim',
            \     ]
            \ }

" System specific
if has("win32")
else
    let g:packager_config.packs += [
                "\     #{ name: 'vim-scripts/fcitx.vim', location: 'start' }
                \     #{ name: 'lilydjwg/fcitx.vim', location: 'start' }
                \ ]
endif

" {{{ Helpers for loading packages
" Dynamic load package filetype
function! s:AddPackFT(filetype,plug)
    let ft = type(a:filetype) == type([]) ? join(a:filetype, ",") : a:filetype
    let plglist = type(a:plug) == type([]) ? join(a:plug, " | packadd ") : a:plug
    execute "autocmd FileType " . ft . " ++once packadd " . plglist
endfunction
" Dynamic load package command
function! s:AddPackCmd(cmdname, exec, args)
    if has_key(a:args, 'cond') ? eval(a:args.cond) : !has(':' . a:cmdname)
        let cmdargs = (has_key(a:args, 'args') ? '-nargs=' . a:args.args : '') . ' '
        execute "command! " . cmdargs . a:cmdname . ' delcommand ' . a:cmdname . '|' . a:exec
    endif
endfunction
" }}} End helpers for loading packages

call s:AddPackFT('md,markdown', ['tabular', 'vim-markdown'])
call s:AddPackFT('tex,plaintex', 'vimtex')
call s:AddPackCmd('NERDTree', 'packadd nerdtree | NERDTree', {})
call s:AddPackCmd('AsyncRun', 'packadd asyncrun.vim | AsyncRun <args>', {'args': '*'})
call s:AddPackCmd('Goyo', 'packadd goyo.vim | Goyo <args>', {'args': '*'})
call s:AddPackCmd('LLPStartPreview', 'packadd vim-latex-live-preview | LLPStartPreview', {})
call s:AddPackCmd('MarkdownPreview', 'packadd markdown-preview.nvim | e | MarkdownPreview', {})
call s:AddPackCmd('Coc', 'packadd coc.nvim | CocStart', {})
" }}} End package list and setup

" Package commands
command! PackClean call packager#manager#init() | call packager#manager#clean()
command! PackStatus call packager#manager#init() | call packager#manager#status()
command! PackSync call packager#manager#init() | call packager#manager#sync()

" }}} End packages

" {{{ Default filetype settings
function! s:DefaultLanguageSettings()
    function! s:OutputUnableToRun(name)
        echohl Error
        echom a:name .. " is not defined for this file > <"
        echohl Normal
    endfunction
    if !exists(":Compile")
        command! -buffer Compile call s:OutputUnableToRun("Compile")
    endif
    if !exists(":Run")
        command! -buffer Run call s:OutputUnableToRun("Run")
    endif
endfunction
autocmd BufEnter,BufFilePost * call s:DefaultLanguageSettings()
" }}} End default filetype settings

" vim: set ft=vim :
