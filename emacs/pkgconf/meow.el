;; Default setup
(setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
(defun seni-meow-insert-exit ()
  (interactive)
  (if smartparens-mode (meow-paren-mode) (meow-insert-exit)))
(meow-define-keys 'insert
  '("C-[" . seni-meow-insert-exit)
  '("C-h" . delete-backward-char))
(meow-motion-overwrite-define-key
 '("j" . meow-next)
 '("k" . meow-prev)
 '("<escape>" . keyboard-quit))
(meow-leader-define-key
 ;; SPC j/k will run the original command in MOTION state.
 '("j" . "H-j")
 '("k" . "H-k")
 ;; Use SPC (0-9) for digit arguments.
 '("1" . meow-digit-argument)
 '("2" . meow-digit-argument)
 '("3" . meow-digit-argument)
 '("4" . meow-digit-argument)
 '("5" . meow-digit-argument)
 '("6" . meow-digit-argument)
 '("7" . meow-digit-argument)
 '("8" . meow-digit-argument)
 '("9" . meow-digit-argument)
 '("0" . meow-digit-argument)
 '("/" . meow-keypad-describe-key)
 '("?" . meow-cheatsheet))
(meow-normal-define-key
 '("0" . meow-expand-0)
 '("9" . meow-expand-9)
 '("8" . meow-expand-8)
 '("7" . meow-expand-7)
 '("6" . meow-expand-6)
 '("5" . meow-expand-5)
 '("4" . meow-expand-4)
 '("3" . meow-expand-3)
 '("2" . meow-expand-2)
 '("1" . meow-expand-1)
 '("-" . negative-argument)
 '(";" . meow-reverse)
 '("," . meow-inner-of-thing)
 '("." . meow-bounds-of-thing)
 '("[" . meow-beginning-of-thing)
 '("]" . meow-end-of-thing)
 '("a" . meow-append)
 '("A" . meow-open-below)
 '("b" . meow-back-word)
 '("B" . meow-back-symbol)
 '("c" . meow-change)
 '("d" . meow-delete)
 '("D" . meow-backward-delete)
 '("e" . meow-next-word)
 '("E" . meow-next-symbol)
 '("f" . meow-find)
 '("g" . meow-cancel-selection)
 '("G" . meow-grab)
 '("h" . meow-left)
 '("H" . meow-left-expand)
 '("i" . meow-insert)
 '("I" . meow-open-above)
 '("j" . meow-next)
 '("J" . meow-next-expand)
 '("k" . meow-prev)
 '("K" . meow-prev-expand)
 '("l" . meow-right)
 '("L" . meow-right-expand)
 '("m" . meow-join)
 '("n" . meow-search)
 '("o" . meow-block)
 '("O" . meow-to-block)
 '("p" . meow-yank)
 '("q" . meow-quit)
 '("Q" . meow-goto-line)
 '("r" . meow-replace)
 '("R" . meow-swap-grab)
 '("s" . meow-kill)
 '("t" . meow-till)
 '("u" . meow-undo)
 '("U" . meow-undo-in-selection)
 '("v" . meow-visit)
 '("w" . meow-mark-word)
 '("W" . meow-mark-symbol)
 '("x" . meow-line)
 '("X" . meow-goto-line)
 '("y" . meow-save)
 '("Y" . meow-sync-grab)
 '("z" . meow-pop-selection)
 '("=" . seni-meow-indent)
 '("'" . repeat)
 '("<escape>" . keyboard-quit))
(meow-leader-define-key
 '("C-w" . 'window-switching-map))

;; Window and tab switching
(define-prefix-command 'window-and-tab-bar-map)
(global-set-key (kbd "C-t") 'window-and-tab-bar-map)
(add-to-list 'meow-keypad-start-keys '(?t . ?t))
(dolist (key '(
               ("0" delete-window)
               ("1" delete-other-windows)
               ("2" split-window-below)
               ("3" split-window-right)
               ("o" switch-window)
               ("c" tab-bar-new-tab)
               ("w" tab-bar-close-tab)
               ("n" tab-bar-switch-to-next-tab)
               ("p" tab-bar-switch-to-prev-tab)
               ("b" switch-to-buffer)))
  (define-key window-and-tab-bar-map (kbd (car key)) (cadr key)))

;; Indent
(defun seni-meow-indent (&optional start end) (interactive)
       (letrec ((sel (if (region-active-p)
                         `(,(point-marker) ,(mark-marker))
                       `(,(point-at-bol) ,(point-at-eol))))
                (start (or start (min (car sel) (cadr sel))))
                (end (or end (max (car sel) (cadr sel)))))
         (indent-region start end)))

;; Input method
;; @seni-meow-last-imstate: Current input method state in insert mode
;; @seni-meow-last-sysimstate: Current system input method state in insert mode
(setq-default seni-meow-last-imstate nil)
(setq-default seni-meow-last-sysimstate nil)
(add-hook 'meow-insert-exit-hook
          (lambda ()
            (delete-trailing-whitespace (pos-bol) (pos-eol))
            (setq-local seni-meow-last-sysimstate
                        (string-to-number (string-trim (shell-command-to-string "fcitx5-remote"))))
            (when (= seni-meow-last-sysimstate 2)
              (call-process "fcitx5-remote" nil nil nil "-c"))
            (when current-input-method
              (setq-local seni-meow-last-imstate current-input-method)
              (set-input-method nil))))
(add-hook 'meow-insert-enter-hook
          (lambda ()
            (when (and (boundp 'seni-meow-last-sysimstate) (= seni-meow-last-sysimstate 2))
              (call-process "fcitx5-remote" nil nil nil "-o"))
            (when (bound-and-true-p seni-meow-last-imstate)
              (set-input-method seni-meow-last-imstate))))

;; Enable parens mode
(add-hook 'meow-mode-hook
          (lambda ()
          (when (bound-and-true-p smartparens-mode) (meow-paren-mode))))

;; Enable
(meow-global-mode 1)
